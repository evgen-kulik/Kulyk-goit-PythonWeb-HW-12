Контакти зберігаються в базі даних та містять в собі наступну інформацію:
- Ім'я;
- Прізвище;
- Електронна адреса;
- Номер телефону (в одного юзера може бути кілька номерів);
- День народження;
- Додаткові дані (необов'язково).

Користування застосунком (домашнє завдання модулю №11).
1. Запуск сервера "uvicorn main:app --host localhost --port 8000 --reload".
2. Створення телефонного номера в БД виконується через "Create Contact". Номер вводиться як рядок.
3. Створення Юзера в БД виконується через "Create User". В якості телефонів в список передаються їх "id".
4. Виведення всіх юзерів/телефонів в json вигляді в документацію http://localhost:8000/docs виконується через
"Get Users"/"Get Contacts".
Для цього вказати "skip" по замовчуванню "0", "limit" по замовчуванню "100". *Дані виводяться в порядку створення/зміни
(не по зростанню "id").
5. Отримання одного юзера/телефона за ідентифікатором ("id") виконується через "Get User"/"Get Contact".
У випадку відсутності "id" в БД буде виведено сповіщення "User not found"/"Contact not found".
6. Оновлення існуючого юзера/телефона виконується через "Update User"/"Update Contact".
7. Видалення юзера/телефона виконується через "Remove User"/"Remove Contact" (треба вказати "id").
8. Додатково реалізовано пошук юзера за іменем (Find User By Name), прізвищем (Find User By Last Name) чи
адресою електронної пошти (Find User By Email).
9. Додатково реалізовано виведення списку контактів з днями народження на найближчі 7 днів
через "Find Next 7 Days Birthdays".
======================================================================================================================
Домашнє завдання модулю №12.
1. Реалізовано механізм аутентифікації в застосунку.
2. Всі операції з контактами (окрім "Create User", "Create Contact") проводяться тільки зареєстрованими юзерами (реалізація JWT токенів).
3. Операції "Update User", "Update Contact", "Remove user", "Remove contact" проводиться тільки власниками цих даних.
4. У випадку спроби створення юзера зі вже існуючим email, сервер поверне "HTTP 409 Conflict".
5. Сервер хешує пароль і не зберігає його у відкритому вигляді у базі даних.
6. При успішній реєстрації сервер повертає HTTP статус відповіді 201 Created та дані нового юзера.
7. Для операцій POST створення нового контакта/юзера сервер повертає статус 201 Created.
8. При аутентифікації юзера сервер приймає запит з email та password юзера.
9. Якщо користувач не існує або пароль не співпадає, повертається помилка "HTTP 401 Unauthorized".
10. Механізм авторизації за допомогою JWT токенів реалізований парою токенів: токена доступу "access_token" та токен оновлення "refresh_token".
======================================================================================================================
Домашнє завдання модулю №13.
1. Реалізовано механізм верифікації електронної пошти зареєстрованого користувача;
2. Обмежено кількість запитів до маршрутів контактів.
3. Увімкнено Cross-Origin Resource Sharing (CORS). Зараз запити дозволено всім доменам.
4. Реалізовано можливість оновлення аватара користувача (задіяно сервіс Cloudinary).
5. Усі змінні середовища зберігаються у файлі ".env".
6. Для запуску всіх сервісів і баз даних у застосунку використовується Docker Compose.
